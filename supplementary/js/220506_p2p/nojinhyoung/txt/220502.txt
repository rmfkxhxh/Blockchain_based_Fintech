1. 원장의 최신화
2. 상대의 체인 정보를 요청해서 받아온다
3. 블록 체굴시 알려주기
4. 새로운 노드에 연결 되었을때 -> 상대의 정보 확인




//////////////// 
라이브러리 패키지 프레임워크

라이브러리(패키지와 모듈의 묶음) === 패키지 (모듈의 묶음)
폴더 안에 프로그램 관련된 파일이 잔뜩 담겨져 있는거
express 등등

프레임워크
설치시 딱딱 정해진 디렉토리가 있는 것들
react 등등....

express 

서버 클라이언트 지시를 실행
    공통언어 - http 프로토콜

app -> 객체 
app.listen() 메서드 는 지정된 호스트 및 포트와 자신을 바인딩하여 
모든 연결을 바인딩하고 수신 대기합니다. 
포트가 정의되어 있지 않거나 0이면 테스트 등의 자동화 작업에 주로 
사용되는 운영 체제에서 사용하지 않는 임의의 포트를 할당합니다.

express() 가 반환 하는 앱 객체 는 요청을 처리하는 콜백으로 
Node의 HTTP 서버에 전달되는 JavaScript 함수입니다. 이렇게 하면 
앱 이 상속하지 않기 때문에 동일한 코드 기반으로 동일한 
앱의 HTTP 및 HTTPS 버전을 모두 제공할 수 있습니다 .

// module도 객체
require() / module.exports
require -> return 값 존재 
    require 역할은 내가 가지고오고 싶은 파일의 결과물을 module.exports 객체를 통해서 return으로 받아줌
module.exports 
    결과물을 저장하는 공간

// 미들웨어 콜백 함수? 
Express 미들웨어란 무엇인가? 쉽게 말해 함수이다. Express에서는 사실상 모든 것이 미들웨어이다. 

http:// host~ (= 도메인:port) / path~

next() 메서드 사용 이유 -> req 객체를 변경해서 다음 router에 전달하기 위해서?

express.urlencoded({extended:true}) -> result (req,res.next) => {}

  express req, res : http 모듈의 req, res 객체를 확장한 것
req 요청 객체 (클라이언트에서 서버로 보내는 요청에 대한 정보 등등이 들어있는 객체)
res 응답 객체 (서버에서 클라이언트로 보내는 응답에 대한 내용 들이 들어있는 객체)

 send json render 다 body영역을 채움
 응답을 보낼땐 string이 원칙 (json.stringity 사용 이유)
res.send() 클라이언트에 응답을 보냄.  
res.json() 클라이언트로 JSON 값을 보냄.
res.render() 템플릿 엔진을 사용하여 뷰를 렌더링한다.
    // 파일 안에 있는 모든 내용을 텍스트로 가져와서 res.send에 string으로 변환해 res.send로 body에 완성본을 보낸다
    
     

http:// host~ (= 도메인:port) / path~

JavaScript
    -callback

nodejs
    - 모듈 / 미들웨어 / 패키지 / 라이브러리
    - app / router
    - require() / module.exports

express
    -express.urlencoded({extended:true})
    -req / res
    -next()
    -res.send() / json() / render()